{"version":3,"sources":["work/List.js","components/Control.js","work/Input.js","work/TodoList.js","index.js"],"names":["List","Component","props","toggle","index","todoss","todos","newTodos","JSON","parse","stringify","done","set","delTodo","idx","filter","item","renderTodos","map","todo","onClick","type","checked","dangerouslySetInnerHTML","__html","title","arr","this","length","Input","set_state","obj","setState","handleChange","e","inputValue","target","value","addTodo","state","localStorage","getItem","setItem","ref","input","onChange","TodoList","ReactDOM","render","document","getElementById"],"mappings":"kMAqDeA,G,MChDOC,YDAtB,kDACI,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEVC,OAAO,SAACC,GACJ,IAAIC,EAAS,EAAKH,MAAMI,MACpBC,EAAWC,KAAKC,MAAMD,KAAKE,UAAUL,IACzCE,EAASH,GAAOO,MAAOJ,EAASH,GAAOO,KACvC,EAAKT,MAAMU,IAAI,CAACN,MAAMC,KAPR,EASlBM,QAAQ,SAACC,GACL,IAAIT,EAAS,EAAKH,MAAMI,MACxB,EAAKJ,MAAMU,IAAI,CACXN,MAAMD,EAAOU,QAAO,SAACC,EAAKZ,GAAN,OAAcA,GAAOU,QAZ/B,EAgBlBG,YAAY,SAACN,GAET,OADY,EAAKT,MAAMI,MACVY,KAAI,SAACC,EAAKf,GACnB,GAAGO,GAAOQ,EAAKR,KACX,OAAO,4BACH,2BACIS,QAAW,kBAAI,EAAKjB,OAAOC,IAC3BiB,KAAO,WACPC,QAAUX,IAEd,0BAAMY,wBAAyB,CAACC,OAAOL,EAAKM,SAC5C,4BAAQL,QAAS,kBAAI,EAAKP,QAAQT,KAAlC,qBA3BE,EADtB,qDAmCQ,IAAIsB,EAAMC,KAAKzB,MAAMI,MAAMS,QAAO,SAAAC,GAAI,OAAGA,EAAKL,QAC9C,OACI,6BACI,uDAASe,EAAIE,QACb,4BAAKD,KAAKV,aAAY,IACtB,wDACA,4BAAMU,KAAKV,aAAY,SAzCvC,GAA0BhB,cE0DX4B,EA5Df,kDACI,aAAc,IAAD,8BACT,gBAqBJC,UAAU,SAACC,GACP,EAAKC,SAASD,IAvBL,EAyBbE,aAAa,SAACC,GACV,EAAKF,SAAS,CAACG,WAAWD,EAAEE,OAAOC,SA1B1B,EA4BbC,QAAU,WACoB,IAAvB,EAAKC,MAAMJ,aAGV,EAAKH,SAAS,CACV1B,MAAM,CACF,CACImB,MAAM,EAAKc,MAAMJ,WACjBxB,MAAK,IAHR,mBAKE,EAAK4B,MAAMjC,UAG1B,EAAK0B,SAAS,CAACG,WAAW,OAvC1B,EAAKI,MAAQ,CACTJ,WAAW,GACX7B,MAAM,IAJD,EADjB,gEAUQ,IAAIA,EAAQkC,aAAaC,QAAQ,SAC9BnC,GACCqB,KAAKK,SAAS,CACV1B,MAAME,KAAKC,MAAMH,OAbjC,2CAkBQkC,aAAaE,QACT,QACAlC,KAAKE,UAAUiB,KAAKY,MAAMjC,UApBtC,+BA4Cc,IAAD,SACsBqB,KAAKY,MAAnBJ,GADR,EACE7B,MADF,EACQ6B,YACb,OACI,6BACI,2BACAd,KAAK,OACLsB,IAAO,SAAAR,GAAU,OAAE,EAAKS,MAAOT,GAC/BU,SAAUlB,KAAKM,aACfI,MAAOF,IACP,4BAAQf,QAASO,KAAKW,SAAtB,gBACA,kBAAC,EAAD,CAAMhC,MAAOqB,KAAKY,MAAMjC,MAAOM,IAAMe,KAAKG,iBAtD1D,GAA2B7B,aCWZ6C,EAVf,uKAEQ,OACI,6BACI,kBAAC,EAAD,WAJhB,GAA8B7C,aCS9B8C,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.0ff2f05f.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\n\r\n\r\n\r\nexport class List extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    toggle=(index)=>{\r\n        let todoss = this.props.todos;\r\n        let newTodos = JSON.parse(JSON.stringify(todoss));\r\n        newTodos[index].done =!newTodos[index].done;\r\n        this.props.set({todos:newTodos})\r\n    }\r\n    delTodo=(idx)=>{\r\n        let todoss = this.props.todos;\r\n        this.props.set({\r\n            todos:todoss.filter((item,index)=>index!=idx)\r\n        })\r\n\r\n    }\r\n    renderTodos=(done)=>{\r\n        let todos = this.props.todos;\r\n        return todos.map((todo,index)=>{\r\n            if(done ==todo.done){\r\n                return <li>\r\n                    <input\r\n                        onClick = {()=>this.toggle(index)}\r\n                        type = 'checkbox'\r\n                        checked ={done}\r\n                    />\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    <button onClick={()=>this.delTodo(index)}>删除</button>\r\n                </li>\r\n            }\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        let arr = this.props.todos.filter(item=>!item.done)\r\n        return (\r\n            <div>\r\n                <h2>正在进行{arr.length}</h2>\r\n                <ul>{this.renderTodos(false)}</ul>\r\n                <h2>已经完成</h2>\r\n                <ul >{this.renderTodos(true)}</ul>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default List\r\n","\r\nimport React, { Component } from 'react';\r\nimport './control.css';\r\n\r\n//组件名首字母大写\r\nclass Control extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            inpValue: '',\r\n            todos:[\r\n                {title:'1',done:false},\r\n                {title:'2',done:false},\r\n                {title:'3',done:false},\r\n                {title:'4',done:true},\r\n            ],\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value});\r\n    }\r\n    componentDidMount(){\r\n        this.input.focus();\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos:JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    // ComponentDidUpdate(){\r\n    //     localStorage.setItem('todos',JSON.stringify(this.state.todos))\r\n    // }\r\n    addTodo=()=>{\r\n        if(this.state.inpValue ==''){\r\n            alert('所填内容不能为空！');\r\n            return;\r\n        }else{\r\n           this.setState({\r\n                todos:[\r\n                    {\r\n                        title:this.state.inpValue,\r\n                        done:false\r\n                    },\r\n                    ...this.state.todos\r\n                ]\r\n            }) \r\n            this.setState({inpValue:''})\r\n        }\r\n        \r\n    }\r\n    delTodo=(idx)=>{\r\n        //方法一\r\n        // this.state.todos.splice(idx,1);\r\n        // this.setState({todos:this.state.todos});\r\n        // 方法二\r\n        // let newTodos =JSON.parse(JSON.stringify(this.state.todos)) ;\r\n        // newTodos.splice(idx,1);\r\n        // this.setState({todos:newTodos});\r\n        // 方法三\r\n        this.setState({\r\n            todos:this.state.todos.filter((item,index)=>index!=idx)\r\n        })\r\n        localStorage.setItem('todos',JSON.stringify(this.state.todos))\r\n    } \r\n    toggle =(index)=>{\r\n        let newTodos =JSON.parse(JSON.stringify(this.state.todos)) ;\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({todos:newTodos})\r\n    }\r\n    renderTodos=(done)=>{\r\n        return this.state.todos.map((todo,index)=>{\r\n            if(done == todo.done){\r\n                return <li>\r\n                    <input \r\n                        onClick = {()=>this.toggle(index)}\r\n                        type='checkbox' \r\n                        checked = {done} \r\n                    />\r\n                    <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                    {/* <span>{todo.title}</span> */}\r\n                    <button onClick={()=>this.delTodo(index)}>删除</button>\r\n                </li>\r\n             }\r\n                            \r\n        })\r\n    }\r\n    render() {\r\n        const {todos,inpValue} = this.state;\r\n        // let arr1 = todos.filter(item=>!item.done);\r\n        \r\n        // let arr2 = todos.filter(item=>item.done);\r\n       \r\n        return (\r\n            <div className=\"box\">\r\n                <label htmlFor='inp'>todolist</label>\r\n                {/*加上value属性会变成受控组件 */}\r\n                <input \r\n                id = 'inp'\r\n                ref = {inp=>this.input = inp}\r\n                value={inpValue} \r\n                type = \"text\" \r\n                onChange={this.handleChange}/> \r\n                <button onClick={this.addTodo}>添加</button>\r\n                <h2>正在进行</h2>\r\n                <ul>{this.renderTodos(false)}</ul>\r\n                <h2>已经完成</h2>\r\n                <ul >{this.renderTodos(true)}</ul>\r\n                 <ul>\r\n                {\r\n                    // 条件渲染\r\n                    3>21\r\n                    ?<button>登录</button>:<span>hello</span>\r\n                }\r\n                   \r\n               </ul>\r\n            <button>{2>3?'登录':'注册'}</button> \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Control;\r\n","import React, { Component } from 'react'\r\nimport List from './List'\r\n\r\nexport class Input extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inputValue:'',\r\n            todos:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        // this.input.focus();\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos:JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n    set_state=(obj)=>{\r\n        this.setState(obj);\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({inputValue:e.target.value});\r\n    }\r\n    addTodo = ()=>{\r\n        if(this.state.inputValue==''){\r\n            return;\r\n        }\r\n            this.setState({\r\n                todos:[\r\n                    {\r\n                        title:this.state.inputValue,\r\n                        done:false\r\n                    },\r\n                    ...this.state.todos\r\n                ]\r\n            })\r\n        this.setState({inputValue:''})\r\n    }\r\n    render() {\r\n        const {todos,inputValue} = this.state;\r\n        return (\r\n            <div>\r\n                <input \r\n                type='text'\r\n                ref = {inputValue=>this.input= inputValue}\r\n                onChange={this.handleChange} \r\n                value={inputValue}/ >\r\n                <button onClick={this.addTodo}>添加</button>\r\n                <List todos={this.state.todos} set ={this.set_state}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Input\r\n","import React, { Component } from 'react';\r\nimport List from './List';\r\nimport Input from './Input';\r\n\r\nexport class TodoList extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Input />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoList;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import $ from 'jquery';\r\n// import Home from './pages/Home';\r\n// import List from './components/List';\r\nimport Control from './components/Control';\r\n// import Demo01 from './pages/demo01';\r\n// import App from './pages/App';\r\n// import HOC,{Detail} from './pages/HOC'\r\n// import Hook from './pages/Hook';\r\nimport TodoList from './work/TodoList'\r\n\r\n\r\nReactDOM.render(\r\n    <TodoList />,\r\n    document.getElementById(\"root\")\r\n)\r\n\r\n// let ele = React.createElement('h1',\r\n//     {id:'title'},\r\n//     React.createElement('div',{},'hello'),\r\n//     'react'\r\n// );\r\n\r\n// ReactDOM.render(\r\n//   ele,\r\n//   document.getElementById(\"root\")\r\n// )\r\n// let ele = <div>react <h1>hello</h1></div>\r\n// let ReactDOM = {\r\n//   render(eleobj,container){\r\n//     //解构\r\n//     const{type,props} = eleobj;\r\n//     //创建第一层节点\r\n//     let ele = document.createElement(type);\r\n//     //遍历属性对象，将属性添加到第一层节点对象上\r\n//     for(const prop in props){\r\n//       console.log(prop);\r\n//       if(prop == 'children'){\r\n//         if(typeof props.children == 'string'){\r\n//           const txtNode = document.createElement(props.children);\r\n//           ele.appendChild(txtNode);\r\n//           break;\r\n//         }\r\n//         // 将第一层节点对象的子元素添加进去\r\n//         props.children.forEach(child=>{\r\n//           if(typeof child == 'string'){\r\n//             const txtNode = document.createTextNode(props.children);\r\n//             ele.appendChild(txtNode);\r\n//           }\r\n//           else{\r\n//             ReactDOM.render(child,ele);\r\n//           }\r\n//         })\r\n//       }\r\n//       else{\r\n//         ele[prop]=props[prop];\r\n//       }\r\n//     }\r\n//     // 将第一层DOM节点添加到container中\r\n//     container.appendChild(ele);\r\n//   }\r\n// }\r\n// ReactDOM.render(\r\n//   ele,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n//函数组件\r\n// UI组件，木偶组件\r\n// function App(props){\r\n//   console.log(props);\r\n//   const {title,id}=props;\r\n//   return <div>\r\n//     <div>{title}</div>\r\n//     <div>{id}</div>\r\n//   </div>\r\n// } \r\n\r\n// // 智能组件\r\n// class Demo extends React.Component{\r\n//   constructor(){\r\n//     super();\r\n//    // 声明状态\r\n//     this.state = {\r\n//       name:new Date().toLocaleString()\r\n//     };\r\n//     setInterval(()=>{\r\n//       this.setState({name:new Date().toLocaleString()});\r\n//     },1000);\r\n//   }\r\n//   render(){\r\n//     return <div>\r\n//       <div>name:{this.state.name}</div>\r\n//       <App title={this.state.name} id =\"app\"/>\r\n//     </div>\r\n//   }\r\n// }\r\n// ReactDOM.render(\r\n//   <App />,\r\n//   <Demo />,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n\r\n// console.log($);\r\n\r\n// let List = (props)=>{\r\n//   return <ul>\r\n//     {\r\n//       props.data.map(\r\n//         (item)=><li key = {item.id}>{item.title}</li>\r\n//         )\r\n//     }\r\n//   </ul>\r\n// }\r\n\r\n// const Buttons = (props)=>{\r\n//   const btns = [1,2,3,4,5];\r\n//   getData=(pages)=>{\r\n//     console.log(pages);\r\n//     fetch('https://cnodejs.org/api/v1/topics?page='+pages).then(res=>res.json()).then(({data})=>{\r\n//       console.log(data);\r\n//       this.setState({data})\r\n//     })\r\n//   }\r\n//   return <div>\r\n//     {\r\n//       btns.map((item)=><button key ={item} onClick={()=>this.getData(item)}>{item}</button>)\r\n//     }\r\n//   </div>\r\n// }\r\n\r\n// class Home extends React.Component{\r\n//   constructor(){\r\n//     super();\r\n//     this.state={\r\n//       data:[]\r\n//       }\r\n//   }\r\n//   componentDidMount(){\r\n//     fetch('https://cnodejs.org/api/v1/topics').then(res=>res.json()).then(({data})=>{\r\n//       console.log(data);\r\n//       this.setState({data})\r\n//     })\r\n//   }\r\n//   getData=(pages)=>{\r\n//     console.log(pages);\r\n//     fetch('https://cnodejs.org/api/v1/topics?page='+pages).then(res=>res.json()).then(({data})=>{\r\n//       console.log(data);\r\n//       this.setState({data})\r\n//     })\r\n//   }\r\n//   render(){\r\n//     const {data} = this.state;\r\n//     const btns = [1,2,3,4,5];\r\n//     return <div>\r\n//       {\r\n//         btns.map(\r\n//           item=>(\r\n//             <button key = {item} onClick={()=>this.getData(item)}>{item}</button>\r\n//           )\r\n//         )\r\n//       }\r\n//       <List data = {data}/>\r\n      \r\n//     </div>\r\n//   }\r\n// }\r\n\r\n// ReactDOM.render(\r\n//   <Home />,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n// ReactDOM.render(\r\n//     <Control/>,\r\n//     document.getElementById(\"root\")\r\n// );\r\n\r\n// ReactDOM.render(\r\n//     <Demo01/>,\r\n//     document.getElementById(\"root\")\r\n// );\r\n\r\n// ReactDOM.render(\r\n//     <App/>,\r\n//     document.getElementById(\"root\")\r\n// );\r\n\r\n// ReactDOM.render(\r\n//     <div><HOC /><Detail /></div>,\r\n//     document.getElementById(\"root\")\r\n// )\r\n// ReactDOM.render(\r\n//     <Hook />,\r\n//     document.getElementById(\"root\")\r\n// )"],"sourceRoot":""}